
{{ $fullname :=  include "dscp-ipfs.fullname" . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "dscp-ipfs.fullname" . }}
  labels:
    {{- include "dscp-ipfs.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "dscp-ipfs.fullname" . }}
  selector:
    matchLabels:
      name: {{ include "dscp-ipfs.fullname" . }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      labels:
        name: {{ include "dscp-ipfs.fullname" . }}
    spec:
      {{- include "dscp-ipfs.imagePullSecrets" . | indent 6 }}
      initContainers:
        - name: {{ include "dscp-ipfs.initIpfsConfig.name" . }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          env:
            - name: IPFS_PATH
              value: {{ .Values.config.ipfsDataPath }}
          envFrom:
            - configMapRef:
                name: {{ include "dscp-ipfs.fullname" . }}-config
          command: ['/bin/sh', '-c', '-e', '-x']
          args:
            - |
              [ ! -f "$IPFS_PATH/config" ] && $ipfsCommand init --profile server;
              $ipfsCommand config Addresses.API /ip4/0.0.0.0/tcp/$ipfsApiPort;
              $ipfsCommand config --json Addresses.Swarm "[\"/ip4/0.0.0.0/tcp/$ipfsSwarmPort\"]";
              $ipfsCommand config --json Addresses.Announce "[\"/dns4/{{ $fullname }}-swarm.{{ .Release.Namespace }}.svc.cluster.local/tcp/$ipfsSwarmPort/\"]";
              $ipfsCommand config Datastore.StorageMax $(echo "$dataVolumeSize""Gb");
              $ipfsCommand config --json Swarm.AddrFilters $ipfsSwarmAddrFilters;
              $ipfsCommand config --json API.HTTPHeaders.Access-Control-Allow-Origin "[\"http://0.0.0.0:$ipfsApiPort\", \"http://127.0.0.1:$ipfsApiPort\"]";
              $ipfsCommand bootstrap rm --all;
              if [ ! -z "$ipfsBootNodeAddress" ]; then $ipfsCommand bootstrap add $ipfsBootNodeAddress; fi;
          volumeMounts:
            - mountPath: {{ .Values.config.ipfsDataPath }}
              name: ipfs-data
        {{- if and .Values.config.publicKey .Values.config.privateKey }}              
        - name: {{ include "dscp-ipfs.initIpfsConfig.name" . }}-keys
          image: jetbrainsinfra/jq:latest
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          env:
            - name: IPFS_PATH
              value: {{ .Values.config.ipfsDataPath }}
            - name: IPFS_PUBLIC_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "dscp-ipfs.fullname" . }}-secret
                  key: publicKey
            - name: IPFS_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "dscp-ipfs.fullname" . }}-secret
                  key: privateKey
          envFrom:
            - configMapRef:
                name: {{ include "dscp-ipfs.fullname" . }}-config
          command: ['/bin/sh', '-c', '-e', '-x']
          args:
            - |
              echo "$(jq --arg publickey $IPFS_PUBLIC_KEY '.Identity.PeerID = $publickey' /ipfs/config)" > /ipfs/config ;
              echo "$(jq --arg privatekey $IPFS_PRIVATE_KEY '.Identity.PrivKey = $privatekey' /ipfs/config)" > /ipfs/config ;
          volumeMounts:
            - mountPath: {{ .Values.config.ipfsDataPath }}
              name: ipfs-data
        {{- end }}
      containers:
        - name: {{ include "dscp-ipfs.fullname" . }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command: [ './app/index.js' ]
          env:
            - name: HEALTHCHECK_POLL_PERIOD_MS
              valueFrom:
                configMapKeyRef:
                  name: {{ include "dscp-ipfs.fullname" . }}-config
                  key: healthCheckPollPeriod
            - name: HEALTHCHECK_TIMEOUT_MS
              valueFrom:
                configMapKeyRef:
                  name: {{ include "dscp-ipfs.fullname" . }}-config
                  key: healthCheckTimeout
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ include "dscp-ipfs.fullname" . }}-config
                  key: healthCheckPort
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "dscp-ipfs.fullname" . }}-config
                  key: logLevel
            - name: NODE_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ include "dscp-ipfs.fullname" . }}-config
                  key: nodeHost
            - name: NODE_PORT
              value: "9944"
            {{- if .Values.config.ipfsCommand }}
            - name: IPFS_EXECUTABLE
              valueFrom:
                configMapKeyRef:
                  name: {{ include "dscp-ipfs.fullname" . }}-config
                  key: ipfsCommand
            {{- end }}
            - name: IPFS_ARGS
              valueFrom:
                configMapKeyRef:
                  name: {{ include "dscp-ipfs.fullname" . }}-config
                  key: ipfsArgs
            - name: IPFS_LOGGING
              valueFrom:
                configMapKeyRef:
                  name: {{ include "dscp-ipfs.fullname" . }}-config
                  key: ipfsLogLevel
            - name: IPFS_PATH
              value: {{ .Values.config.ipfsDataPath }}
          volumeMounts:
            - mountPath: {{ .Values.config.ipfsDataPath }}
              name: ipfs-data
          ports:
            - containerPort: {{ .Values.config.healthCheckPort }}
              name: http-health
              protocol: TCP
            - containerPort: {{ .Values.config.ipfsSwarmPort }}
              name: ipfs-swarm
              protocol: TCP
            - containerPort: {{ .Values.config.ipfsApiPort }}
              name: ipfs-http-api
              protocol: TCP
          {{- if .Values.config.enableLivenessProbe }}
          livenessProbe:
            httpGet:
              path: /health
              port: http-health
            initialDelaySeconds: 60
            failureThreshold: 5
            timeoutSeconds: 3
            periodSeconds: 10
          {{- end }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: ipfs-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if .Values.storage.storageClass }}
        storageClassName: {{ .Values.storage.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ printf "%vGi" .Values.storage.dataVolumeSize | quote }}
